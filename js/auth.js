// –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è Codex - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –î–õ–Ø GITHUB PAGES + RENDER.COM
class AuthManager {
    constructor() {
        this.token = localStorage.getItem('authToken');
        this.user = this.getCurrentUser();
        this.baseURL = this.getBaseURL();
        this.serverWakeupTime = 60000; // 60 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
        this.isGitHubPages = window.location.hostname.includes('github.io');
    }

    getBaseURL() {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π URL –¥–ª—è API
        if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
            return `http://${window.location.hostname}:3000`;
        }
        
        // –î–ª—è GitHub Pages –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º Render.com
        if (this.isGitHubPages) {
            return 'https://codex-of.onrender.com';
        }
        
        // –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –¥–æ–º–µ–Ω
        return window.location.origin;
    }

    getCurrentUser() {
        try {
            const userData = localStorage.getItem('currentUser');
            return userData ? JSON.parse(userData) : null;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            return null;
        }
    }

    isAuthenticated() {
        return !!(this.token && this.user);
    }

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è "–ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è" Render.com —Å–µ—Ä–≤–µ—Ä–∞ (–±–µ–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
    async wakeUpServer() {
        console.log('‚è∞ –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ Render.com...');
        const startTime = Date.now();
        
        try {
            // –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            const response = await fetch(this.baseURL, {
                method: 'GET'
                // –£–±–∏—Ä–∞–µ–º cache-control –∏ pragma –¥–ª—è GitHub Pages
            });
            
            const endTime = Date.now();
            const wakeupTime = endTime - startTime;
            
            console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –ø—Ä–æ—Å–Ω—É–ª—Å—è –∑–∞ ${wakeupTime}ms`);
            
            // –î–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            if (wakeupTime > 5000) {
                console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞...');
                await new Promise(resolve => setTimeout(resolve, 3000));
            }
            
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞:', error);
            return false;
        }
    }

    async makeAuthenticatedRequest(url, options = {}) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å GitHub Pages
        const headers = {
            'Content-Type': 'application/json',
            ...options.headers
        };

        // –î–æ–±–∞–≤–ª—è–µ–º cache-control —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ù–ï GitHub Pages
        if (!this.isGitHubPages) {
            headers['Cache-Control'] = 'no-cache';
            headers['Pragma'] = 'no-cache';
        }

        if (this.token) {
            headers['Authorization'] = `Bearer ${this.token}`;
        }

        let lastError = null;
        
        // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Å retry –ª–æ–≥–∏–∫–æ–π –¥–ª—è Render.com
        for (let attempt = 1; attempt <= 3; attempt++) {
            try {
                console.log(`üì° –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/3: ${url}`);
                
                const response = await fetch(`${this.baseURL}${url}`, {
                    ...options,
                    headers,
                    timeout: 30000 // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
                });

                // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã
                if (response.status === 401 && url !== '/api/user') {
                    console.log('üö´ –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—ã—Ö–æ–¥');
                    this.logout();
                    throw new Error('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ —Å–Ω–æ–≤–∞.');
                }

                if (response.ok || response.status === 401) {
                    console.log(`‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω, —Å—Ç–∞—Ç—É—Å: ${response.status}`);
                    return response;
                }

                // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 502/503, –≤–æ–∑–º–æ–∂–Ω–æ –æ–Ω —Å–ø–∏—Ç
                if ((response.status === 502 || response.status === 503) && attempt === 1) {
                    console.log('üí§ –°–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç —Å–ø–∞—Ç—å, –ø—Ä–æ–±—É–∂–¥–∞–µ–º...');
                    await this.wakeUpServer();
                    continue;
                }

                lastError = new Error(`HTTP ${response.status}: ${response.statusText}`);

            } catch (error) {
                lastError = error;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ CORS –æ—à–∏–±–∫–æ–π
                if (error.message.includes('CORS') || error.message.includes('blocked')) {
                    console.log('üîÑ CORS –æ—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞, –ø—Ä–æ–±—É–∂–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä...');
                    await this.wakeUpServer();
                    continue;
                }
                
                // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å —Å–µ—Ç—å—é
                if (attempt === 1 && (error.name === 'TypeError' || error.message.includes('fetch'))) {
                    console.log('üîÑ –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞, –≤–æ–∑–º–æ–∂–Ω–æ —Å–µ—Ä–≤–µ—Ä —Å–ø–∏—Ç. –ü—Ä–æ–±—É–∂–¥–∞–µ–º...');
                    const wakeupSuccess = await this.wakeUpServer();
                    if (wakeupSuccess) {
                        continue; // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è
                    }
                }

                // –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                if (attempt < 3) {
                    console.log(`‚è≥ –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...`);
                    await new Promise(resolve => setTimeout(resolve, 2000));
                }
            }
        }

        throw lastError;
    }

    async login(username, password) {
        try {
            console.log('üîë –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', this.baseURL);
            console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', username);
            console.log('üåê GitHub Pages —Ä–µ–∂–∏–º:', this.isGitHubPages);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ø–∏—Ç –ª–∏ —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–¥ –ª–æ–≥–∏–Ω–æ–º
            const serverAwake = await this.checkServerHealth();
            if (!serverAwake) {
                await this.wakeUpServer();
            }
            
            // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è GitHub Pages
            const headers = {
                'Content-Type': 'application/json'
            };
            
            // –î–æ–±–∞–≤–ª—è–µ–º cache-control —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ù–ï GitHub Pages
            if (!this.isGitHubPages) {
                headers['Cache-Control'] = 'no-cache';
                headers['Pragma'] = 'no-cache';
            }
            
            const response = await fetch(`${this.baseURL}/api/login`, {
                method: 'POST',
                headers: headers,
                body: JSON.stringify({ username, password })
            });

            let data;
            try {
                data = await response.json();
            } catch (parseError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞:', parseError);
                return { 
                    success: false, 
                    error: '–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–µ—Ä –µ—â–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è.' 
                };
            }
            
            console.log('üìä –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', {
                status: response.status,
                success: data.success,
                error: data.error
            });

            if (data.success) {
                this.token = data.token;
                this.user = data.user;
                
                localStorage.setItem('authToken', this.token);
                localStorage.setItem('currentUser', JSON.stringify(this.user));
                
                console.log('‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
                console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', this.user.username);
                console.log('üé´ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
                
                return { success: true, user: this.user };
            } else {
                console.log('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', data.error);
                
                // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–∏–ø–∏—á–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º Render.com
                if (response.status >= 500) {
                    return { 
                        success: false, 
                        error: '–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 30-60 —Å–µ–∫—É–Ω–¥.' 
                    };
                }
                
                return { success: false, error: data.error };
            }
        } catch (error) {
            console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
            
            if (error.message.includes('CORS')) {
                return { 
                    success: false, 
                    error: '–ü—Ä–æ–±–ª–µ–º–∞ —Å CORS. –°–µ—Ä–≤–µ—Ä –ø—Ä–æ–±—É–∂–¥–∞–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 30-60 —Å–µ–∫—É–Ω–¥.' 
                };
            }
            
            if (error.name === 'TypeError' || error.message.includes('fetch')) {
                return { 
                    success: false, 
                    error: '–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' 
                };
            }
            
            return { success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É' };
        }
    }

    async register(username, password) {
        try {
            console.log('üìù –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', this.baseURL);
            console.log('üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', username);
            console.log('üåê GitHub Pages —Ä–µ–∂–∏–º:', this.isGitHubPages);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ø–∏—Ç –ª–∏ —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
            const serverAwake = await this.checkServerHealth();
            if (!serverAwake) {
                await this.wakeUpServer();
            }
            
            // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è GitHub Pages
            const headers = {
                'Content-Type': 'application/json'
            };
            
            // –î–æ–±–∞–≤–ª—è–µ–º cache-control —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ù–ï GitHub Pages
            if (!this.isGitHubPages) {
                headers['Cache-Control'] = 'no-cache';
                headers['Pragma'] = 'no-cache';
            }
            
            const response = await fetch(`${this.baseURL}/api/register`, {
                method: 'POST',
                headers: headers,
                body: JSON.stringify({ username, password })
            });

            let data;
            try {
                data = await response.json();
            } catch (parseError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞:', parseError);
                return { 
                    success: false, 
                    error: '–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–µ—Ä –µ—â–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è.' 
                };
            }
            
            console.log('üìä –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', {
                status: response.status,
                success: data.success,
                error: data.error
            });

            if (data.success) {
                this.token = data.token;
                this.user = data.user;
                
                localStorage.setItem('authToken', this.token);
                localStorage.setItem('currentUser', JSON.stringify(this.user));
                
                console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
                console.log('üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', this.user.username);
                console.log('üé´ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
                
                return { success: true, user: this.user };
            } else {
                console.log('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', data.error);
                
                // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–∏–ø–∏—á–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º Render.com
                if (response.status >= 500) {
                    return { 
                        success: false, 
                        error: '–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 30-60 —Å–µ–∫—É–Ω–¥.' 
                    };
                }
                
                return { success: false, error: data.error };
            }
        } catch (error) {
            console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
            
            if (error.message.includes('CORS')) {
                return { 
                    success: false, 
                    error: '–ü—Ä–æ–±–ª–µ–º–∞ —Å CORS. –°–µ—Ä–≤–µ—Ä –ø—Ä–æ–±—É–∂–¥–∞–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 30-60 —Å–µ–∫—É–Ω–¥.' 
                };
            }
            
            if (error.name === 'TypeError' || error.message.includes('fetch')) {
                return { 
                    success: false, 
                    error: '–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' 
                };
            }
            
            return { success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É' };
        }
    }

    async logout() {
        try {
            if (this.token) {
                await this.makeAuthenticatedRequest('/api/logout', {
                    method: 'POST'
                });
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
        } finally {
            // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            this.token = null;
            this.user = null;
            localStorage.removeItem('authToken');
            localStorage.removeItem('currentUser');
            
            console.log('üö™ –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω, –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
            
            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            window.location.href = 'auth.html';
        }
    }

    async checkServerHealth() {
        try {
            const response = await fetch(this.baseURL, {
                method: 'GET',
                timeout: 5000
            });
            return response.ok;
        } catch (error) {
            return false;
        }
    }

    async verifyToken() {
        if (!this.token) {
            console.log('üîç –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
            return false;
        }

        try {
            console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞...');
            
            const response = await this.makeAuthenticatedRequest('/api/user', {
                method: 'GET'
            });
            
            if (response.status === 401) {
                console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω');
                // –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
                this.token = null;
                this.user = null;
                localStorage.removeItem('authToken');
                localStorage.removeItem('currentUser');
                return false;
            }
            
            if (response.ok) {
                const data = await response.json();
                if (data.user) {
                    this.user = data.user;
                    localStorage.setItem('currentUser', JSON.stringify(this.user));
                    console.log('‚úÖ –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', data.user.username);
                    return true;
                }
            }
            
            console.log('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
            return false;
        } catch (error) {
            console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error);
            return false;
        }
    }

    requireAuth() {
        if (!this.isAuthenticated()) {
            console.log('üö´ –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...');
            window.location.href = 'auth.html';
            return false;
        }
        return true;
    }
}

// –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è–º–∏ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
class EventManager {
    constructor(authManager) {
        this.auth = authManager;
        this.events = [];
    }

    async loadEvents() {
        try {
            console.log('üìÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π...');
            const response = await this.auth.makeAuthenticatedRequest('/api/events');
            const data = await response.json();
            
            if (Array.isArray(data)) {
                this.events = data;
                console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.length} —Å–æ–±—ã—Ç–∏–π`);
                return this.events;
            } else {
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π:', error);
            throw error;
        }
    }

    async createEvent(eventData) {
        try {
            console.log('‚ûï –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:', eventData.title);
            const response = await this.auth.makeAuthenticatedRequest('/api/events', {
                method: 'POST',
                body: JSON.stringify(eventData)
            });

            const data = await response.json();
            
            if (data.success) {
                this.events.push(data.event);
                console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ:', data.event.title);
                return { success: true, event: data.event };
            } else {
                console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', data.error);
                return { success: false, error: data.error };
            }
        } catch (error) {
            console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
            return { success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É' };
        }
    }

    async updateEvent(eventId, eventData) {
        try {
            console.log('‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:', eventId);
            const response = await this.auth.makeAuthenticatedRequest(`/api/events/${eventId}`, {
                method: 'PUT',
                body: JSON.stringify(eventData)
            });

            const data = await response.json();
            
            if (data.success) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –º–∞—Å—Å–∏–≤–µ
                const index = this.events.findIndex(e => e.id === eventId);
                if (index !== -1) {
                    this.events[index] = data.event;
                }
                console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', data.event.title);
                return { success: true, event: data.event };
            } else {
                console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', data.error);
                return { success: false, error: data.error };
            }
        } catch (error) {
            console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
            return { success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É' };
        }
    }

    async deleteEvent(eventId) {
        try {
            console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:', eventId);
            const response = await this.auth.makeAuthenticatedRequest(`/api/events/${eventId}`, {
                method: 'DELETE'
            });

            const data = await response.json();
            
            if (data.success) {
                // –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
                this.events = this.events.filter(e => e.id !== eventId);
                console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ');
                return { success: true };
            } else {
                console.log('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', data.error);
                return { success: false, error: data.error };
            }
        } catch (error) {
            console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
            return { success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É' };
        }
    }

    canEditEvent(event) {
        return this.auth.user && event.createdBy === this.auth.user.id;
    }

    getEventsByUser(userId = null) {
        const targetUserId = userId || this.auth.user?.id;
        return this.events.filter(event => event.createdBy === targetUserId);
    }

    getUpcomingEvents() {
        const now = new Date();
        return this.events
            .filter(event => new Date(event.date) >= now)
            .sort((a, b) => new Date(a.date) - new Date(b.date));
    }

    getEventsByDate(date) {
        const targetDate = new Date(date).toDateString();
        return this.events.filter(event => new Date(event.date).toDateString() === targetDate);
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
window.authManager = new AuthManager();
window.eventManager = new EventManager(window.authManager);

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
console.log('üåê –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:', window.authManager.baseURL);
console.log('üìç GitHub Pages —Ä–µ–∂–∏–º:', window.authManager.isGitHubPages);
console.log('üìç –î–ª—è —Å–º–µ–Ω—ã —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑–º–µ–Ω–∏—Ç–µ URL –≤ –º–µ—Ç–æ–¥–µ getBaseURL()');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
async function checkServerStatus() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
        
        const isHealthy = await window.authManager.checkServerHealth();
        
        if (isHealthy) {
            console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω:', window.authManager.baseURL);
        } else {
            console.log('üí§ –°–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç —Å–ø–∞—Ç—å, –ø—Ä–æ–±—É–∂–¥–∞–µ–º...');
            await window.authManager.wakeUpServer();
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞:', error);
        console.log('üí° –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ:');
        console.log('   1. –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ 30-60 —Å–µ–∫—É–Ω–¥');
        console.log('   2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É');
        console.log('   3. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –Ω–µ –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç—ã Render.com');
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
setTimeout(checkServerStatus, 1000);

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { AuthManager, EventManager };
}