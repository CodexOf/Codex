// –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —É–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è Codex
// –≠—Ç–æ—Ç —Ñ–∞–π–ª –∑–∞–º–µ–Ω—è–µ—Ç auth.js –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
console.log('üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Codex...');

// –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
Promise.all([
    new Promise(resolve => {
        if (window.PersistentStorage) {
            resolve();
        } else {
            const script = document.createElement('script');
            script.src = 'js/improved/persistent-storage.js';
            script.onload = resolve;
            document.head.appendChild(script);
        }
    }),
    new Promise(resolve => {
        if (window.ImprovedAuthManager) {
            resolve();
        } else {
            const script = document.createElement('script');
            script.src = 'js/improved/improved-auth.js';
            script.onload = resolve;
            document.head.appendChild(script);
        }
    }),
    new Promise(resolve => {
        if (window.ImprovedEventManager) {
            resolve();
        } else {
            const script = document.createElement('script');
            script.src = 'js/improved/improved-event-manager.js';
            script.onload = resolve;
            document.head.appendChild(script);
        }
    })
]).then(() => {
    initializeImprovedSystem();
}).catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:', error);
    // Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É
    initializeLegacySystem();
});

function initializeImprovedSystem() {
    console.log('‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...');
    
    // –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
    window.authManager = new ImprovedAuthManager();
    window.eventManager = new ImprovedEventManager(window.authManager);
    
    // –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º API
    createLegacyCompatibilityLayer();
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    setupAutomaticManagement();
    
    console.log('üéâ –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!');
    console.log('üí° –¢–µ–ø–µ—Ä—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –Ω–∞–¥–µ–∂–Ω–æ –∏ –Ω–µ —Ç–µ—Ä—è—é—Ç—Å—è –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±—Ä–∞—É–∑–µ—Ä–∞');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    showUserFriendlyStatus();
}

function initializeLegacySystem() {
    console.warn('‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
    
    // –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    class LegacyAuthManager {
        constructor() {
            this.token = localStorage.getItem('authToken');
            this.user = this.getCurrentUser();
            this.baseURL = this.getBaseURL();
        }

        getBaseURL() {
            if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
                return `http://${window.location.hostname}:3000`;
            }
            if (window.location.hostname.includes('github.io')) {
                return 'https://codex-of.onrender.com';
            }
            return window.location.origin;
        }

        getCurrentUser() {
            try {
                const userData = localStorage.getItem('currentUser');
                return userData ? JSON.parse(userData) : null;
            } catch (error) {
                return null;
            }
        }

        isAuthenticated() {
            return !!(this.token && this.user);
        }

        async makeAuthenticatedRequest(url, options = {}) {
            const headers = {
                'Content-Type': 'application/json',
                ...options.headers
            };

            if (this.token) {
                headers['Authorization'] = `Bearer ${this.token}`;
            }

            const response = await fetch(`${this.baseURL}${url}`, {
                ...options,
                headers
            });

            if (response.status === 401) {
                this.logout();
                throw new Error('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ —Å–Ω–æ–≤–∞.');
            }

            return response;
        }

        async login(username, password) {
            try {
                const response = await fetch(`${this.baseURL}/api/login`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ username, password })
                });

                const data = await response.json();

                if (data.success) {
                    this.token = data.token;
                    this.user = data.user;
                    
                    localStorage.setItem('authToken', this.token);
                    localStorage.setItem('currentUser', JSON.stringify(this.user));
                    
                    return { success: true, user: this.user };
                } else {
                    return { success: false, error: data.error };
                }
            } catch (error) {
                return { success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É' };
            }
        }

        async register(username, password) {
            try {
                const response = await fetch(`${this.baseURL}/api/register`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ username, password })
                });

                const data = await response.json();

                if (data.success) {
                    this.token = data.token;
                    this.user = data.user;
                    
                    localStorage.setItem('authToken', this.token);
                    localStorage.setItem('currentUser', JSON.stringify(this.user));
                    
                    return { success: true, user: this.user };
                } else {
                    return { success: false, error: data.error };
                }
            } catch (error) {
                return { success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É' };
            }
        }

        logout() {
            this.token = null;
            this.user = null;
            localStorage.removeItem('authToken');
            localStorage.removeItem('currentUser');
            window.location.href = 'auth.html';
        }

        requireAuth() {
            if (!this.isAuthenticated()) {
                window.location.href = 'auth.html';
                return false;
            }
            return true;
        }
    }

    // –ü—Ä–æ—Å—Ç–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–±—ã—Ç–∏–π
    class LegacyEventManager {
        constructor(authManager) {
            this.auth = authManager;
            this.events = [];
        }

        async loadEvents() {
            try {
                const response = await this.auth.makeAuthenticatedRequest('/api/events');
                const data = await response.json();
                
                if (Array.isArray(data)) {
                    this.events = data;
                    return this.events;
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π:', error);
            }
            return [];
        }

        async createEvent(eventData) {
            try {
                const response = await this.auth.makeAuthenticatedRequest('/api/events', {
                    method: 'POST',
                    body: JSON.stringify(eventData)
                });

                const data = await response.json();
                
                if (data.success) {
                    this.events.push(data.event);
                    return { success: true, event: data.event };
                } else {
                    return { success: false, error: data.error };
                }
            } catch (error) {
                return { success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É' };
            }
        }

        canEditEvent(event) {
            return this.auth.user && event.createdBy === this.auth.user.id;
        }

        getEventsByUser(userId = null) {
            const targetUserId = userId || this.auth.user?.id;
            return this.events.filter(event => event.createdBy === targetUserId);
        }

        getUpcomingEvents() {
            const now = new Date();
            return this.events
                .filter(event => new Date(event.date) >= now)
                .sort((a, b) => new Date(a.date) - new Date(b.date));
        }

        getEventsByDate(date) {
            const targetDate = new Date(date).toDateString();
            return this.events.filter(event => new Date(event.date).toDateString() === targetDate);
        }
    }

    window.authManager = new LegacyAuthManager();
    window.eventManager = new LegacyEventManager(window.authManager);
    
    console.log('‚ö†Ô∏è –†–µ–∑–µ—Ä–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
}

function createLegacyCompatibilityLayer() {
    // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º API
    
    // –î—É–±–ª–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã –≤ —Å—Ç–∞—Ä–æ–º —Å—Ç–∏–ª–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    if (window.authManager.getCurrentUser) {
        window.authManager.user = window.authManager.getCurrentUser();
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    if (!window.authManager.verifyToken) {
        window.authManager.verifyToken = async function() {
            return await this.verifyTokenOnServer();
        };
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã EventManager, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if (!window.eventManager.updateEvent) {
        window.eventManager.updateEvent = async function(eventId, eventData) {
            return await this.updateEvent(eventId, eventData);
        };
    }

    if (!window.eventManager.deleteEvent) {
        window.eventManager.deleteEvent = async function(eventId) {
            return await this.deleteEvent(eventId);
        };
    }
}

function setupAutomaticManagement() {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑ –≤ –¥–µ–Ω—å
    const lastCleanup = PersistentStorage.getItem('lastCleanup') || 0;
    const daysSinceCleanup = (Date.now() - lastCleanup) / (24 * 60 * 60 * 1000);
    
    if (daysSinceCleanup > 1) {
        setTimeout(() => {
            performAutomaticCleanup();
        }, 5000); // –ß–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
    if (window.eventManager && window.eventManager.createBackup) {
        setTimeout(() => {
            window.eventManager.createBackup();
        }, 10000); // –ß–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    }

    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    const isFirstRun = !PersistentStorage.getItem('improvedSystemInitialized');
    if (isFirstRun) {
        migrateFromLegacyStorage();
        PersistentStorage.setItem('improvedSystemInitialized', true);
    }

    // –°–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π –±—Ä–∞—É–∑–µ—Ä–∞
    window.addEventListener('beforeunload', () => {
        // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
        if (window.eventManager && window.eventManager.createBackup) {
            window.eventManager.createBackup();
        }
    });

    window.addEventListener('online', () => {
        console.log('üåê –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if (window.authManager && window.authManager.syncData) {
            window.authManager.syncData();
        }
        if (window.eventManager && window.eventManager.processSyncQueue) {
            window.eventManager.processSyncQueue();
        }
    });

    window.addEventListener('offline', () => {
        console.log('üì± –ü–µ—Ä–µ—Ö–æ–¥ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º');
    });
}

function performAutomaticCleanup() {
    console.log('üßπ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏...');
    
    try {
        // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π (—Å—Ç–∞—Ä—à–µ –≥–æ–¥–∞)
        if (window.eventManager && window.eventManager.cleanupOldEvents) {
            const removed = window.eventManager.cleanupOldEvents(365);
            if (removed > 0) {
                console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ ${removed} —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π`);
            }
        }

        // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π –∏–∑ cookies
        const expiredCookies = document.cookie.split(';').filter(cookie => {
            try {
                const name = cookie.split('=')[0].trim();
                if (name.startsWith('temp_') || name.startsWith('old_')) {
                    return true;
                }
            } catch (e) {}
            return false;
        });

        expiredCookies.forEach(cookie => {
            const name = cookie.split('=')[0].trim();
            document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;
        });

        if (expiredCookies.length > 0) {
            console.log(`üç™ –£–¥–∞–ª–µ–Ω–æ ${expiredCookies.length} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö cookies`);
        }

        PersistentStorage.setItem('lastCleanup', Date.now());
        console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

    } catch (error) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏:', error);
    }
}

function migrateFromLegacyStorage() {
    console.log('üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞...');
    
    try {
        // –ú–∏–≥—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        const oldToken = localStorage.getItem('authToken');
        if (oldToken && !PersistentStorage.getItem('authToken')) {
            PersistentStorage.setItem('authToken', oldToken);
            console.log('‚úÖ –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω');
        }

        // –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const oldUser = localStorage.getItem('currentUser');
        if (oldUser && !PersistentStorage.getItem('currentUser')) {
            try {
                const userData = JSON.parse(oldUser);
                PersistentStorage.setItem('currentUser', userData);
                console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã');
            } catch (e) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            }
        }

        // –ú–∏–≥—Ä–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const oldUsers = localStorage.getItem('codex_users');
        if (oldUsers && !PersistentStorage.getItem('codex_users')) {
            try {
                const usersData = JSON.parse(oldUsers);
                PersistentStorage.setItem('codex_users', usersData);
                console.log('‚úÖ –ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞');
            } catch (e) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
            }
        }

        // –ú–∏–≥—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π
        const oldEvents = localStorage.getItem('codex_events');
        if (oldEvents && !PersistentStorage.getItem('cachedEvents')) {
            try {
                const eventsData = JSON.parse(oldEvents);
                PersistentStorage.setItem('cachedEvents', eventsData);
                console.log('‚úÖ –°–æ–±—ã—Ç–∏—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã');
            } catch (e) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–±—ã—Ç–∏–π');
            }
        }

        console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

    } catch (error) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    }
}

function showUserFriendlyStatus() {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ
    
    setTimeout(async () => {
        try {
            const serverHealth = window.authManager.getServerHealth();
            const storageInfo = await PersistentStorage.getStorageInfo();
            
            let statusMessage = 'üéØ –°–∏—Å—Ç–µ–º–∞ Codex: ';
            
            if (serverHealth.online) {
                statusMessage += `–û–Ω–ª–∞–π–Ω (${serverHealth.latency}ms)`;
            } else {
                statusMessage += '–û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º';
            }
            
            const storageCount = storageInfo.localStorage.items + 
                               storageInfo.sessionStorage.items + 
                               storageInfo.cookies.items + 
                               storageInfo.indexedDB.items;
            
            if (storageCount > 0) {
                statusMessage += ` | –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ${getStorageNames(storageInfo)}`;
            }
            
            console.log(statusMessage);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ UI, –µ—Å–ª–∏ –µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
            const statusElement = document.getElementById('system-status') || 
                                 document.querySelector('.system-status') ||
                                 document.querySelector('.server-status');
            
            if (statusElement) {
                statusElement.textContent = statusMessage;
                statusElement.style.display = 'block';
            }

        } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:', error);
        }
    }, 2000);
}

function getStorageNames(storageInfo) {
    const available = [];
    
    if (storageInfo.localStorage.available && storageInfo.localStorage.items > 0) {
        available.push('–ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
    }
    if (storageInfo.sessionStorage.available && storageInfo.sessionStorage.items > 0) {
        available.push('—Å–µ—Å—Å–∏–∏');
    }
    if (storageInfo.cookies.available && storageInfo.cookies.items > 0) {
        available.push('cookies');
    }
    if (storageInfo.indexedDB.available && storageInfo.indexedDB.items > 0) {
        available.push('–±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    }
    
    if (available.length === 0) return '–ø–∞–º—è—Ç–∏';
    if (available.length === 1) return available[0];
    if (available.length === 2) return available.join(' –∏ ');
    
    return available.slice(0, -1).join(', ') + ' –∏ ' + available[available.length - 1];
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
window.CodexDebug = {
    async runFullDiagnostics() {
        console.log('üîç –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã Codex...');
        
        if (window.authManager && window.authManager.runDiagnostics) {
            const authDiag = await window.authManager.runDiagnostics();
            console.log('üîê –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', authDiag);
        }
        
        if (window.eventManager && window.eventManager.getEventStats) {
            const eventStats = window.eventManager.getEventStats();
            console.log('üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π:', eventStats);
        }
        
        if (window.PersistentStorage) {
            const storageTest = await PersistentStorage.testAllSystems();
            console.log('üíæ –¢–µ—Å—Ç —Ö—Ä–∞–Ω–∏–ª–∏—â:', storageTest);
        }
        
        console.log('‚úÖ –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    },
    
    exportAllData() {
        const data = {
            user: window.authManager?.user,
            events: window.eventManager?.events,
            storageInfo: PersistentStorage?.getStorageInfo(),
            timestamp: new Date().toISOString()
        };
        
        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `codex-export-${Date.now()}.json`;
        a.click();
        URL.revokeObjectURL(url);
        
        console.log('üì¶ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
    },
    
    clearAllData() {
        if (confirm('‚ö†Ô∏è –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ Codex. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?')) {
            PersistentStorage?.clear();
            localStorage.clear();
            sessionStorage.clear();
            console.log('üßπ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã');
            window.location.reload();
        }
    },
    
    enableDebugMode() {
        if (window.PersistentStorage) {
            PersistentStorage.enableDebug();
        }
        console.log('üîç –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤–∫–ª—é—á–µ–Ω');
    }
};

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { 
        AuthManager: window.ImprovedAuthManager || LegacyAuthManager, 
        EventManager: window.ImprovedEventManager || LegacyEventManager 
    };
}

console.log('üåü –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Codex –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
console.log('üí° –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏: CodexDebug.runFullDiagnostics(), CodexDebug.exportAllData()');
