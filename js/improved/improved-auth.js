// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
class ImprovedAuthManager {
    constructor() {
        this.mode = this.detectOptimalMode();
        this.baseURL = this.getBaseURL();
        this.token = null;
        this.user = null;
        this.isInitialized = false;
        this.autoSync = null;
        this.healthChecker = null;
        
        this.initializeAuth();
    }

    async initializeAuth() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
        
        // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é –∏–∑ –ª—é–±–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        const recoveryResult = await this.attemptSessionRecovery();
        
        if (recoveryResult.success) {
            this.token = recoveryResult.token;
            this.user = recoveryResult.user;
            console.log('‚úÖ –°–µ—Å—Å–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', this.user.username);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            const isValid = await this.verifyTokenOnServer();
            if (!isValid) {
                console.warn('‚ö†Ô∏è –¢–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
                this.clearSession();
            } else {
                // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
                this.startAutoSync();
            }
        } else {
            console.log('‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–∞
        this.startHealthChecker();
        this.isInitialized = true;
    }

    detectOptimalMode() {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
        const hostname = window.location.hostname;
        
        if (hostname.includes('github.io') || hostname.includes('onrender.com')) {
            return 'server'; // –ü—Ä–æ–¥–∞–∫—à–µ–Ω - —Ç–æ–ª—å–∫–æ —Å–µ—Ä–≤–µ—Ä
        }
        
        if (hostname === 'localhost' || hostname === '127.0.0.1') {
            return 'hybrid'; // –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ - –≥–∏–±—Ä–∏–¥–Ω—ã–π —Ä–µ–∂–∏–º
        }
        
        return 'server'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–µ—Ä–≤–µ—Ä
    }

    getBaseURL() {
        switch (this.mode) {
            case 'server':
                return 'https://codex-of.onrender.com';
            case 'hybrid':
                // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä, –ø–æ—Ç–æ–º —É–¥–∞–ª–µ–Ω–Ω—ã–π
                return this.detectLocalServer() || 'https://codex-of.onrender.com';
            default:
                return window.location.origin;
        }
    }

    detectLocalServer() {
        // –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        try {
            const xhr = new XMLHttpRequest();
            xhr.open('HEAD', `http://${window.location.hostname}:3000/api/user`, false);
            xhr.timeout = 1000;
            xhr.send();
            
            if (xhr.status !== 0) {
                return `http://${window.location.hostname}:3000`;
            }
        } catch (e) {
            // –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        }
        return null;
    }

    async attemptSessionRecovery() {
        console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏...');
        
        const strategies = [
            () => this.recoverFromPersistentStorage(),
            () => this.recoverFromServer(),
            () => this.recoverFromLegacyStorage()
        ];

        for (const strategy of strategies) {
            try {
                const result = await strategy();
                if (result.success) {
                    console.log('‚úÖ –°–µ—Å—Å–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑:', strategy.name || '—Å—Ç—Ä–∞—Ç–µ–≥–∏—é');
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Å–µ—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â–∞—Ö
                    this.saveSessionData(result.token, result.user);
                    return result;
                }
            } catch (error) {
                console.warn('‚ö†Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞:', error.message);
            }
        }

        return { success: false, error: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é' };
    }

    recoverFromPersistentStorage() {
        const token = PersistentStorage.getItem('authToken');
        const user = PersistentStorage.getItem('currentUser');
        
        if (token && user) {
            return { success: true, token, user };
        }
        
        return { success: false };
    }

    async recoverFromServer() {
        // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω
        const token = PersistentStorage.getItem('authToken');
        if (!token) return { success: false };

        try {
            const response = await fetch(`${this.baseURL}/api/user`, {
                headers: { 'Authorization': `Bearer ${token}` },
                timeout: 5000
            });

            if (response.ok) {
                const data = await response.json();
                return { success: true, token, user: data.user };
            }
        } catch (error) {
            console.warn('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏');
        }

        return { success: false };
    }

    recoverFromLegacyStorage() {
        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è
        try {
            const token = localStorage.getItem('authToken');
            const userData = localStorage.getItem('currentUser');
            
            if (token && userData) {
                const user = JSON.parse(userData);
                return { success: true, token, user };
            }
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ legacy storage:', error);
        }
        
        return { success: false };
    }

    async verifyTokenOnServer() {
        if (!this.token) return false;

        try {
            const response = await fetch(`${this.baseURL}/api/user`, {
                headers: { 'Authorization': `Bearer ${this.token}` },
                timeout: 5000
            });

            if (response.ok) {
                const data = await response.json();
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
                if (JSON.stringify(data.user) !== JSON.stringify(this.user)) {
                    this.user = data.user;
                    this.saveSessionData(this.token, this.user);
                }
                return true;
            }
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error);
        }

        return false;
    }

    saveSessionData(token, user) {
        PersistentStorage.setItem('authToken', token);
        PersistentStorage.setItem('currentUser', user);
        PersistentStorage.setItem('lastLoginTime', Date.now());
    }

    clearSession() {
        this.token = null;
        this.user = null;
        
        PersistentStorage.removeItem('authToken');
        PersistentStorage.removeItem('currentUser');
        PersistentStorage.removeItem('lastLoginTime');
        
        if (this.autoSync) {
            this.autoSync.stop();
        }
    }

    isAuthenticated() {
        return !!(this.token && this.user);
    }

    getCurrentUser() {
        return this.user;
    }

    async makeAuthenticatedRequest(url, options = {}) {
        const headers = {
            'Content-Type': 'application/json',
            ...options.headers
        };

        if (this.token) {
            headers['Authorization'] = `Bearer ${this.token}`;
        }

        try {
            const response = await fetch(`${this.baseURL}${url}`, {
                ...options,
                headers,
                timeout: 10000
            });

            // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é
            if (response.status === 401) {
                console.warn('üîÑ –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –ø–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...');
                
                const recovery = await this.attemptSessionRecovery();
                if (recovery.success) {
                    // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
                    headers['Authorization'] = `Bearer ${recovery.token}`;
                    return fetch(`${this.baseURL}${url}`, { ...options, headers });
                } else {
                    this.clearSession();
                    throw new Error('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ —Å–Ω–æ–≤–∞.');
                }
            }

            return response;
        } catch (error) {
            // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ
            if (error.name === 'TypeError' || error.message.includes('fetch')) {
                console.warn('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º');
                return this.handleOfflineRequest(url, options);
            }
            throw error;
        }
    }

    async handleOfflineRequest(url, options) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ
        console.log('üì± –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ:', url);
        
        // –î–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (!options.method || options.method === 'GET') {
            const cacheKey = `cache_${url}`;
            const cachedData = PersistentStorage.getItem(cacheKey);
            
            if (cachedData) {
                console.log('üì¶ –ù–∞–π–¥–µ–Ω—ã –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
                return {
                    ok: true,
                    json: () => Promise.resolve(cachedData)
                };
            }
        }

        // –î–ª—è POST/PUT/DELETE —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        if (['POST', 'PUT', 'DELETE'].includes(options.method)) {
            this.queueOfflineAction(url, options);
        }

        throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.');
    }

    queueOfflineAction(url, options) {
        const queue = PersistentStorage.getItem('offlineQueue') || [];
        queue.push({
            url,
            options,
            timestamp: Date.now(),
            id: Date.now().toString()
        });
        PersistentStorage.setItem('offlineQueue', queue);
        console.log('üìù –î–µ–π—Å—Ç–≤–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –æ—Ñ–ª–∞–π–Ω —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
    }

    async processOfflineQueue() {
        const queue = PersistentStorage.getItem('offlineQueue') || [];
        if (queue.length === 0) return;

        console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ ${queue.length} –¥–µ–π—Å—Ç–≤–∏–π –∏–∑ –æ—Ñ–ª–∞–π–Ω –æ—á–µ—Ä–µ–¥–∏...`);
        
        const processed = [];
        const failed = [];

        for (const action of queue) {
            try {
                const response = await fetch(`${this.baseURL}${action.url}`, action.options);
                if (response.ok) {
                    processed.push(action.id);
                    console.log('‚úÖ –û—Ñ–ª–∞–π–Ω –¥–µ–π—Å—Ç–≤–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ:', action.url);
                } else {
                    failed.push(action);
                }
            } catch (error) {
                failed.push(action);
                console.warn('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ñ–ª–∞–π–Ω –¥–µ–π—Å—Ç–≤–∏—è:', error);
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—á–µ—Ä–µ–¥—å, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
        PersistentStorage.setItem('offlineQueue', failed);
        
        if (processed.length > 0) {
            console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${processed.length} –¥–µ–π—Å—Ç–≤–∏–π`);
        }
        
        if (failed.length > 0) {
            console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å ${failed.length} –¥–µ–π—Å—Ç–≤–∏–π`);
        }
    }

    async login(username, password) {
        try {
            const response = await fetch(`${this.baseURL}/api/login`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ username, password }),
                timeout: 10000
            });

            const data = await response.json();

            if (data.success) {
                this.token = data.token;
                this.user = data.user;
                
                this.saveSessionData(this.token, this.user);
                this.startAutoSync();
                
                console.log('‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ –¥–ª—è:', this.user.username);
                return { success: true, user: this.user };
            } else {
                return { success: false, error: data.error };
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
            
            // –í –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É
            if (this.mode === 'hybrid') {
                return this.loginOffline(username, password);
            }
            
            return { success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É' };
        }
    }

    loginOffline(username, password) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try {
            const users = JSON.parse(localStorage.getItem('codex_users') || '[]');
            const user = users.find(u => 
                u.username.toLowerCase() === username.toLowerCase() && 
                u.password === this.hashPassword(password)
            );

            if (user) {
                this.token = 'offline_' + Date.now();
                this.user = {
                    id: user.id,
                    username: user.username,
                    mode: 'offline'
                };
                
                this.saveSessionData(this.token, this.user);
                console.log('‚úÖ –û—Ñ–ª–∞–π–Ω –≤—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è:', this.user.username);
                return { success: true, user: this.user };
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ñ–ª–∞–π–Ω –≤—Ö–æ–¥–∞:', error);
        }

        return { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ' };
    }

    async register(username, password) {
        try {
            const response = await fetch(`${this.baseURL}/api/register`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ username, password }),
                timeout: 10000
            });

            const data = await response.json();

            if (data.success) {
                this.token = data.token;
                this.user = data.user;
                
                this.saveSessionData(this.token, this.user);
                this.startAutoSync();
                
                console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è:', this.user.username);
                return { success: true, user: this.user };
            } else {
                return { success: false, error: data.error };
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
            return { success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É' };
        }
    }

    async logout() {
        try {
            if (this.token && !this.token.startsWith('offline_')) {
                await this.makeAuthenticatedRequest('/api/logout', {
                    method: 'POST'
                });
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
        } finally {
            this.clearSession();
            console.log('‚úÖ –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω');
            
            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if (window.location.pathname !== '/auth.html') {
                window.location.href = 'auth.html';
            }
        }
    }

    requireAuth() {
        if (!this.isAuthenticated()) {
            const currentPath = window.location.pathname;
            const returnTo = currentPath.includes('calendar') ? '?returnTo=calendar' : '';
            window.location.href = `auth.html${returnTo}`;
            return false;
        }
        return true;
    }

    startAutoSync() {
        if (this.autoSync) return; // –£–∂–µ –∑–∞–ø—É—â–µ–Ω

        this.autoSync = {
            interval: null,
            lastSync: 0,
            
            start: () => {
                console.log('üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
                
                // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                this.autoSync.interval = setInterval(() => {
                    this.syncData();
                }, 5 * 60 * 1000);

                // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ
                window.addEventListener('focus', () => {
                    if (Date.now() - this.autoSync.lastSync > 60000) {
                        this.syncData();
                    }
                });

                // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                window.addEventListener('online', () => {
                    console.log('üåê –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
                    this.syncData();
                    this.processOfflineQueue();
                });
            },
            
            stop: () => {
                if (this.autoSync.interval) {
                    clearInterval(this.autoSync.interval);
                    this.autoSync.interval = null;
                    console.log('‚èπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
                }
            }
        };

        this.autoSync.start();
    }

    async syncData() {
        if (!this.isAuthenticated() || this.token.startsWith('offline_')) return;

        try {
            const isValid = await this.verifyTokenOnServer();
            if (isValid) {
                this.autoSync.lastSync = Date.now();
                PersistentStorage.setItem('lastSyncTime', this.autoSync.lastSync);
                console.log('üîÑ –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å –æ—Ñ–ª–∞–π–Ω –¥–µ–π—Å—Ç–≤–∏–π
                await this.processOfflineQueue();
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error.message);
        }
    }

    startHealthChecker() {
        this.healthChecker = {
            interval: null,
            lastCheck: 0,
            
            start: () => {
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
                this.healthChecker.interval = setInterval(() => {
                    this.checkServerHealth();
                }, 2 * 60 * 1000);
                
                // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                this.checkServerHealth();
            },
            
            stop: () => {
                if (this.healthChecker.interval) {
                    clearInterval(this.healthChecker.interval);
                    this.healthChecker.interval = null;
                }
            }
        };

        this.healthChecker.start();
    }

    async checkServerHealth() {
        const startTime = Date.now();
        
        try {
            const response = await fetch(`${this.baseURL}/api/user`, {
                method: 'HEAD',
                timeout: 5000
            });
            
            const latency = Date.now() - startTime;
            const health = {
                online: response.ok || response.status === 401, // 401 –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç
                latency,
                lastCheck: Date.now(),
                status: response.status
            };
            
            PersistentStorage.setItem('serverHealth', health);
            this.healthChecker.lastCheck = Date.now();
            
            if (health.online) {
                console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω (${latency}ms)`);
            } else {
                console.warn('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            }
            
        } catch (error) {
            const health = {
                online: false,
                latency: Infinity,
                lastCheck: Date.now(),
                error: error.message
            };
            
            PersistentStorage.setItem('serverHealth', health);
            console.warn('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
        }
    }

    getServerHealth() {
        return PersistentStorage.getItem('serverHealth') || {
            online: false,
            latency: Infinity,
            lastCheck: 0
        };
    }

    hashPassword(password) {
        // –ü—Ä–æ—Å—Ç–æ–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–æ–π
        let hash = 0;
        for (let i = 0; i < password.length; i++) {
            const char = password.charCodeAt(i);
            hash = ((hash << 5) - hash) + char;
            hash = hash & hash; // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ 32-–±–∏—Ç–Ω–æ–µ —á–∏—Å–ª–æ
        }
        return hash.toString();
    }

    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã
    async getDiagnostics() {
        const diagnostics = {
            mode: this.mode,
            baseURL: this.baseURL,
            isAuthenticated: this.isAuthenticated(),
            user: this.user ? { id: this.user.id, username: this.user.username } : null,
            serverHealth: this.getServerHealth(),
            storageInfo: await PersistentStorage.getStorageInfo(),
            offlineQueue: PersistentStorage.getItem('offlineQueue') || [],
            lastSync: PersistentStorage.getItem('lastSyncTime'),
            isInitialized: this.isInitialized
        };

        return diagnostics;
    }

    async runDiagnostics() {
        console.log('üîç –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
        
        const diagnostics = await this.getDiagnostics();
        
        console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:');
        console.table(diagnostics);
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        const storageTest = await PersistentStorage.testAllSystems();
        console.log('üíæ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º —Ö—Ä–∞–Ω–µ–Ω–∏—è:', storageTest);
        
        return { diagnostics, storageTest };
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.ImprovedAuthManager = ImprovedAuthManager;

console.log('‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
console.log('üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ authManager.runDiagnostics() –¥–ª—è –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏');
